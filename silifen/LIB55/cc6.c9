/*  cc6.c9 R1.1 24/4/85  */

heir7(lval)
int  lval[];
     {
     int     k,lval2[2];
     k = heir8(lval);
     blanks();
     if ((streq(line+lptr,">>")== 0)&(streq(line+lptr,"<")==0 ))
            return k;
     if ( k )
            rvalue(lval);
     while(1)
            {
            if ( match(">>") )
                    {
                    push();
                    if ( heir8(lval2) )
                            rvalue(lval2);
                    casr();   /* auto stack pop */
                    }
            else if ( match("<<") )
                    {
                    push();
                    if ( heir8(lval2) )
                            rvalue(lval2);
                    casl();
                    }
            else return 0;
            }
     }

heir8(lval)
int  lval[];
     {
     int     k,lval2[2];
     k = heir9(lval);
     blanks();
     if ( (ch != '-') & (ch != '+') )
            return k;
     if ( k )
            rvalue(lval);
     while(1)
            {
            if ( match("+") )
                    {
                    push();
                    if ( heir9(lval2) )
                            rvalue(lval2);
                    if ( cptr = *lval )
                         if((cptr[IDENT]==POINTER)&(cptr[TYPE]==CINT))
                                scale(intwidth);
                    cadd();             /* auto pull in add */
                    }
            else if ( match("-") )
                    {
                    push();
                    if ( heir9(lval2) )
                         rvalue(lval2);
                    if ( cptr = *lval )
                         if((cptr[IDENT]==POINTER)&(cptr[TYPE]==CINT))
                                scale(intwidth);
                    csub();             /* auto pull in sub */
                    }
            else return 0;
            }
     }

heir9(lval)
int  lval[];
     {
     int     k;
     int     lval2[2];
     k = heir10(lval);
     blanks();
     if ( (ch != '*') & (ch != '/') & (ch != '%') )
            return k;
     if ( k )
            rvalue(lval);
     while(1)
            {
            if ( match("*") )
                    {
                    push();
                    if ( heir9(lval2) )     /**should it be heir10?**/
                            rvalue(lval2);
                    mult();            /* cleans up its own stack */
                    }
            else if ( match("/") )
                    {
                    push();
                    if ( heir10(lval2) )
                            rvalue(lval2);
                    div();
                    }
            else if ( match("%") )
                    {
                    push();
                    if ( heir10(lval2) )
                            rvalue(lval2);
                    mod();
                    }
            else return 0;
            }
     }

heir10(lval)
int  lval[];
     {
     int     k;
     char    *ptr;
     if (match("++") )
            {
            if ((k=heir10(lval)) == 0 )
                    {
                    needlval();
                    return 0;
                    }
            if ( lval[1] )
                    push();
            rvalue(lval);
            ptr = *lval;
            if ( (ptr[IDENT] == POINTER ) & (ptr[TYPE] == CINT ))
                    cinc( intwidth );
            else
                    cinc( 1 );
            store(lval);
            return 0;
            }
     if (match("--") )
            {
            if ((k=heir10(lval)) == 0 )
                    {
                    needlval();
                    return 0;
                    }
            if ( lval[1] )
                    push();
            rvalue(lval);
            ptr = *lval;
            if ( (ptr[IDENT] == POINTER ) & (ptr[TYPE] == CINT ))
                    cdec( intwidth );
            else
                    cdec( 1 );
            store(lval);
            return 0;
            }
     if (match("-") )
            {
            k = heir10(lval);
            if ( k )
                    rvalue(lval);
            cneg();
            return 0;
            }
     else if ( match("*") )   /* take contents of pointer */
            {
            k = heir10(lval);
            if ( k )
                    rvalue(lval);
            lval[1] = CINT;
            if ( ptr = *lval )
                    lval[1] = ptr[TYPE];
            *lval = 0;
            return 1;
            }
     else if ( match("&") )     /* take address of variable */
            {
            k = heir10(lval);
            if ( k == 0 )
                    {
                    error("illegal address");
                    return 0;
                    }
            else if ( lval[1] )
                    return 0;
            else
                    {
                    getglb();
                    outstr(ptr = *lval );
                    nl();
                    lval[1] = ptr[TYPE];
                    return 0;
                    }
            }
     else
            {
            k = heir11(lval);
            if ( match("++") )       /* post increment */
                    {
                    if ( k == 0 )
                            {
                            needlval();
                            return 0;
                            }
                    if ( lval[1] )
                            push();
                    rvalue(lval);
                    ptr = *lval;
                    if((ptr[IDENT]==POINTER)&(ptr[TYPE]==CINT))
                            {
                            cinc( intwidth );
                            store(lval);
                            cdec( intwidth );
                            }
                    else
                            {
                            cinc( 1 );
                            store(lval);
                            cdec( 1 );
                            }
 /* the value is incremented and stored then decremented before use */
                    return 0;
                    }
            else if (match("--") )   /* post decrement */
                    {
                    if ( k == 0 )
                            {
                            needlval();
                            return 0;
                            }
                    if ( lval[1] )
                            push();
                    rvalue(lval);
                    ptr = *lval;
                    if((ptr[IDENT]==POINTER)&(ptr[TYPE]==CINT))
                            {
                            cdec( intwidth );
                            store(lval);
                            cinc( intwidth );
                            }
                    else
                            {
                            cdec( 1 );
                            store(lval);
                            cinc( 1 );
                            }
                    return 0;
                    }
            else return k;
            }
     }
